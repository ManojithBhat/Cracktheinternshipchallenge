733. Flood Fill

An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.

You are also given three integers sr, sc, and color. You should perform a flood fill on the image starting from the pixel image[sr][sc].

To perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as 
the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. Replace the color of 
all of the aforementioned pixels with color.

Return the modified image after performing the flood fill.




class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {

        int n= image.length;
        int m = image[0].length;
        boolean [][] vis = new boolean [n][m];
        int initialValue= image[sr][sc];
        image[sr][sc] = color; 
        bfs(image,vis,sr,sc,color,initialValue);
        return image;
        
    }
    public void bfs(int [][] image, boolean [][]vis,int sr,int sc,int color, int initialValue){

        vis[sr][sc] = true;
        Queue<Pair> q = new LinkedList<>();
        q.offer(new Pair(sr,sc,image[sr][sc]));
        int n= image.length;
        int m = image[0].length;

        int[] rowPossibility = {-1, 0, 0, 1}; // Up, Left, Right, Down
        int[] colPossibility = {0, -1, 1, 0}; // Up, Left, Right, Down

        while(!q.isEmpty()){

            Pair temp = q.poll();
            int r=temp.row;
            int c = temp.col;
            int v=temp.value;

            for(int i=0;i<4;i++){
                int newRow = r+rowPossibility[i];
                int newCol = c+colPossibility[i];

                // checking the new index are in the bounds are not
                if(newRow>=0 && newRow<n && newCol>=0 && newCol<m &&
                 vis[newRow][newCol]==false && image[newRow][newCol]== initialValue){

                    vis[newRow][newCol]=true;
                    image[newRow][newCol]=color;
                    q.offer(new Pair(newRow,newCol,image[newRow][newCol]));// actually value member is not necessary for this problem
                 }
            }
        }
    }
    class Pair{
        int row,col,value;
        Pair(int row,int col, int value){
            this.row=row;
            this.col=col;
            this.value=value;
        }
    }
}
